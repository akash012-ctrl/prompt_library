/auth/register,POST,Registers a new user.,None,{ &quot;email&quot;: &quot;user@example.com&quot;, &quot;password&quot;: &quot;password123&quot; },{ &quot;token&quot;: &quot;JWT_TOKEN&quot; },{ &quot;errors&quot;: [{ &quot;msg&quot;: &quot;User already exists&quot;, &quot;param&quot;: &quot;email&quot; }] }
/auth/login,POST,Authenticates a user and returns a JWT token.,None,{ &quot;email&quot;: &quot;user@example.com&quot;, &quot;password&quot;: &quot;password123&quot; },{ &quot;token&quot;: &quot;JWT_TOKEN&quot; },{ &quot;errors&quot;: [{ &quot;msg&quot;: &quot;Invalid credentials&quot;, &quot;param&quot;: &quot;email&quot; }] }
/auth/update-password,POST,Updates the authenticated user&#39;s password.,Authorization: Bearer JWT_TOKEN,{ &quot;currentPassword&quot;: &quot;old_password&quot;, &quot;newPassword&quot;: &quot;new_password&quot; },{ &quot;message&quot;: &quot;Password updated successfully&quot; },{ &quot;errors&quot;: [{ &quot;msg&quot;: &quot;Invalid current password&quot;, &quot;param&quot;: &quot;currentPassword&quot; }] }
/auth/forgot-password,POST,Sends a password reset email to the user.,None,{ &quot;email&quot;: &quot;user@example.com&quot; },{ &quot;message&quot;: &quot;Password reset email sent&quot; },{ &quot;errors&quot;: [{ &quot;msg&quot;: &quot;No account with that email exists&quot; }] }
/auth/reset-password/:token,POST,Resets the user&#39;s password using a reset token.,None,{ &quot;newPassword&quot;: &quot;new_password&quot; },{ &quot;message&quot;: &quot;Password reset successful&quot; },{ &quot;errors&quot;: [{ &quot;msg&quot;: &quot;Password reset token is invalid or has expired&quot; }] }
/prompts,GET,Fetches all prompts.,None,None,[ { &quot;_id&quot;: &quot;prompt_id&quot;, &quot;title&quot;: &quot;Prompt Title&quot;, ... } ],{ &quot;errors&quot;: [{ &quot;msg&quot;: &quot;Server error&quot; }] }
/prompts/:id,GET,Fetches a single prompt by ID.,None,URL Param: id,{ &quot;_id&quot;: &quot;prompt_id&quot;, &quot;title&quot;: &quot;Prompt Title&quot;, ... },{ &quot;errors&quot;: [{ &quot;msg&quot;: &quot;Prompt not found&quot; }] }
/prompts,POST,Creates a new prompt (requires authentication).,Authorization: Bearer JWT_TOKEN,{ &quot;title&quot;: &quot;New Prompt&quot;, &quot;description&quot;: &quot;This is a new prompt.&quot;, &quot;tags&quot;: [&quot;tag1&quot;], &quot;category&quot;: &quot;design&quot; },{ &quot;_id&quot;: &quot;prompt_id&quot;, &quot;title&quot;: &quot;New Prompt&quot;, ... },{ &quot;errors&quot;: [{ &quot;msg&quot;: &quot;Title is required&quot;, &quot;param&quot;: &quot;title&quot; }] }
/prompts/:id,PUT,Updates an existing prompt (requires authentication).,Authorization: Bearer JWT_TOKEN,{ &quot;title&quot;: &quot;Updated Prompt&quot;, &quot;description&quot;: &quot;This is an updated prompt.&quot;, &quot;tags&quot;: [&quot;tag1&quot;], &quot;category&quot;: &quot;coding&quot; },{ &quot;_id&quot;: &quot;prompt_id&quot;, &quot;title&quot;: &quot;Updated Prompt&quot;, ... },{ &quot;errors&quot;: [{ &quot;msg&quot;: &quot;Prompt not found&quot; }] }
/prompts/:id,DELETE,Deletes a prompt (requires authentication).,Authorization: Bearer JWT_TOKEN,URL Param: id,{ &quot;message&quot;: &quot;Prompt deleted successfully&quot; },{ &quot;errors&quot;: [{ &quot;msg&quot;: &quot;Prompt not found&quot; }] }
/prompts/search,GET,Searches prompts by title or tags dynamically.,None,Query Param: query=design,[ { &quot;_id&quot;: &quot;prompt_id&quot;, &quot;title&quot;: &quot;Design Prompt&quot;, ... } ],{ &quot;errors&quot;: [{ &quot;msg&quot;: &quot;Search query must be a string&quot;, &quot;param&quot;: &quot;query&quot; }] }